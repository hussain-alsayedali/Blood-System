// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model nurse {
  id               Int                @id @default(autoincrement())
  type             String             @default("nurse")
  bankId           String             @unique
  createdAt        DateTime           @default(now())
  email            String             @unique @db.VarChar(255)
  phone            String             @unique
  weight           Float
  birth            DateTime
  address          String
  firstName        String
  lastName         String
  password         String
  DonationRequest  DonationRequest[]
  ReceivingRequest ReceivingRequest[]
}

model Recipient {
  id               Int                @id @default(autoincrement())
  type             String             @default("recipient")
  currentUrgency   String
  bankId           String             @unique
  currentMoney     Int                @default(0)
  createdAt        DateTime           @default(now())
  email            String             @unique @db.VarChar(255)
  phone            String             @unique
  weight           Float
  birth            DateTime
  address          String
  firstName        String
  lastName         String
  password         String
  infections       infection[]
  blood            Blood              @relation(fields: [bloodType], references: [type])
  bloodType        String
  BloodBag         BloodBag[]
  ReceivingRequest ReceivingRequest[]
}

model Donor {
  id              Int               @id @default(autoincrement())
  type            String            @default("donor")
  currentMoney    Int               @default(0)
  bankId          String            @unique
  createdAt       DateTime          @default(now())
  email           String            @unique @db.VarChar(255)
  phone           String            @unique
  weight          Float
  birth           DateTime
  address         String
  firstName       String
  lastName        String
  password        String
  infections      infection[]
  blood           Blood             @relation(fields: [bloodType], references: [type])
  bloodType       String
  BloodBag        BloodBag[]
  DonationRequest DonationRequest[]
}

model infection {
  id                   Int            @id @default(autoincrement())
  disease              DiseaseCatalog @relation(fields: [diseaseId], references: [id])
  dateOfInfection      DateTime       @default(now())
  dateOfheal           DateTime?
  strength             String
  cured                Boolean        @default(false)
  Recipient            Recipient?     @relation(fields: [recipientRecipientId], references: [id])
  recipientRecipientId Int?
  Donor                Donor?         @relation(fields: [donorId], references: [id])
  donorId              Int?
  diseaseId            Int
}

model DiseaseCatalog {
  id          Int         @id @default(autoincrement())
  diseaseName String
  infection   infection[]
}

model Blood {
  type        String      @id @unique
  recieveFrom String
  Donor       Donor[]
  Recipient   Recipient[]
}

model BloodBag {
  id               Int                @id @unique @default(autoincrement())
  takingDate       DateTime           @default(now())
  givenTo          Recipient?         @relation(fields: [recipientId], references: [id])
  status           String             @default("good")
  recipientId      Int?
  recipientDate    DateTime?
  Donor            Donor              @relation(fields: [donorId], references: [id])
  donorId          Int
  BloodBank        BloodBank?         @relation(fields: [bloodBankId], references: [id])
  bloodBankId      Int?
  DonationRequest  DonationRequest[]
  ReceivingRequest ReceivingRequest[]
}

model DonationRequest {
  id              Int       @id @unique @default(autoincrement())
  requestDate     DateTime  @default(now())
  donor           Donor     @relation(fields: [donorId], references: [id])
  donorId         Int
  bloodBag        BloodBag? @relation(fields: [bloodBagId], references: [id])
  bloodBagId      Int?
  operationStatus String?
  requestStatus   String?   @default("waiting")
  updateDate      DateTime?
  nurse           nurse?    @relation(fields: [nurseId], references: [id])
  nurseId         Int?
}

model ReceivingRequest {
  id              Int       @id @unique @default(autoincrement())
  requestDate     DateTime  @default(now())
  recipient       Recipient @relation(fields: [recipientId], references: [id])
  recipientId     Int
  bloodBagId      Int?
  updateDate      DateTime?
  bloodBag        BloodBag? @relation(fields: [bloodBagId], references: [id])
  operationStatus String?
  requestStatus   String?   @default("waiting")
  nurse           nurse?    @relation(fields: [nurseId], references: [id])
  nurseId         Int?
}

model BloodBank {
  id        Int        @id @default(autoincrement())
  bloodBags BloodBag[]
}

model Session {
  id        String   @id
  sid       String   @unique
  data      String
  expiresAt DateTime
}
